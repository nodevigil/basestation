version: '3.8'

# Production Docker Compose configuration
# Use this for production deployments

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Main application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    volumes:
      - app_logs:/app/logs
    # Add capabilities for network tools
    cap_add:
      - NET_RAW
      - NET_ADMIN
    restart: unless-stopped
    # Run the application instead of bash
    command: pgdn

  # Optional: Web dashboard (if implemented)
  # web:
  #   build: .
  #   depends_on:
  #     - app
  #   ports:
  #     - "80:8000"
  #   environment:
  #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  app_logs:

networks:
  default:
    driver: bridge

"""
Vulnerability scanner that checks for known vulnerabilities using CVE database.
"""

from typing import Dict, Any, List, Optional
from pgdn.scanning.base_scanner import BaseScanner
from pgdn.utils.cve_updater import search_cves_for_banner


class VulnerabilityScanner(BaseScanner):
    """Vulnerability scanner that checks for known vulnerabilities."""
    
    @property
    def scanner_type(self) -> str:
        return "vulnerability"
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        super().__init__(config)
        self.max_cves_per_banner = self.config.get('max_cves_per_banner', 5)
        self.enable_database_lookup = self.config.get('enable_database_lookup', True)
    
    def scan(self, target: str, banners: Optional[Dict[int, str]] = None, scan_level: int = 1, **kwargs) -> Dict[str, Any]:
        """Perform vulnerability scan based on scan level.
        
        Args:
            target: Target IP/hostname
            banners: Dictionary of port->banner mappings
            scan_level: Scan level (1-3) determining aggressiveness
            **kwargs: Additional scan parameters
            
        Returns:
            Vulnerability scan results
        """
        self.logger.debug(f"Starting vulnerability scan of {target} at level {scan_level}")
        
        # Level 1: No CVE scanning (lightweight)
        if scan_level == 1:
            return {
                "target": target,
                "scan_level": 1,
                "vulnerabilities": {},
                "scanner_type": self.scanner_type,
                "message": "CVE scanning skipped at level 1"
            }
        
        # Level 2: Basic CVE matching via database
        elif scan_level == 2:
            return self._scan_level_2(target, banners, **kwargs)
        
        # Level 3: Enhanced CVE scanning with fuzzing
        elif scan_level == 3:
            return self._scan_level_3(target, banners, **kwargs)
        
        else:
            raise ValueError(f"Invalid scan_level: {scan_level}. Must be 1, 2, or 3.")
    
    def _scan_level_2(self, target: str, banners: Optional[Dict[int, str]], **kwargs) -> Dict[str, Any]:
        """Level 2: Basic CVE database lookup."""
        if not banners:
            return {
                "target": target,
                "scan_level": 2,
                "vulnerabilities": {},
                "scanner_type": self.scanner_type,
                "error": "No banners provided for vulnerability scanning"
            }
        
        vulnerabilities = {}
        
        for port, banner in banners.items():
            if banner:
                vulns = self._match_vulnerabilities(banner)
                if vulns:
                    vulnerabilities[port] = vulns
        
        return {
            "target": target,
            "scan_level": 2,
            "vulnerabilities": vulnerabilities,
            "scanner_type": self.scanner_type
        }
    
    def _scan_level_3(self, target: str, banners: Optional[Dict[int, str]], **kwargs) -> Dict[str, Any]:
        """Level 3: Enhanced vulnerability scanning with additional checks."""
        # Start with level 2 results
        result = self._scan_level_2(target, banners, **kwargs)
        result["scan_level"] = 3
        
        # Add additional vulnerability checks
        if banners:
            # Check for dangerous configurations
            misconfigs = self._check_misconfigurations(banners)
            if misconfigs:
                result["misconfigurations"] = misconfigs
            
            # Check for weak authentication
            weak_auth = self._check_weak_authentication(target, banners)
            if weak_auth:
                result["weak_authentication"] = weak_auth
            
            # Docker exposure check
            docker_exposure = self._check_docker_exposure(target, banners)
            if docker_exposure:
                result["docker_exposure"] = docker_exposure
        
        return result
    
    def _match_vulnerabilities(self, banner: str) -> Optional[List[Dict[str, Any]]]:
        """Match banner against known vulnerabilities.
        
        Args:
            banner: Service banner string
            
        Returns:
            List of matching CVE dictionaries or None
        """
        if not banner:
            return None
        
        if not self.enable_database_lookup:
            return None
            
        try:
            database_cves = search_cves_for_banner(banner)
            if database_cves:
                # Return top matches limited by configuration
                return database_cves[:self.max_cves_per_banner]
        except Exception as e:
            self.logger.warning(f"CVE database lookup failed for banner '{banner}': {e}")
        
        return None
    
    def _check_misconfigurations(self, banners: Dict[int, str]) -> List[Dict[str, Any]]:
        """Check for dangerous misconfigurations.
        
        Args:
            banners: Port to banner mapping
            
        Returns:
            List of misconfigurations found
        """
        misconfigs = []
        
        for port, banner in banners.items():
            banner_lower = banner.lower()
            
            # Check for unencrypted Docker API
            if port == 2375 and "docker" in banner_lower:
                misconfigs.append({
                    "port": port,
                    "type": "unencrypted_docker_api",
                    "description": "Docker API exposed without TLS encryption",
                    "severity": "high"
                })
            
            # Check for default/weak SSH banners
            if port == 22 and "ssh" in banner_lower:
                if "dropbear" in banner_lower:
                    misconfigs.append({
                        "port": port,
                        "type": "weak_ssh_implementation",
                        "description": "Dropbear SSH may have known vulnerabilities",
                        "severity": "medium"
                    })
            
            # Check for exposed databases
            database_ports = {3306: "mysql", 5432: "postgresql", 6379: "redis", 27017: "mongodb"}
            if port in database_ports:
                misconfigs.append({
                    "port": port,
                    "type": "exposed_database",
                    "description": f"{database_ports[port]} database exposed to internet",
                    "severity": "high"
                })
            
            # Check for debug/development servers
            if "werkzeug" in banner_lower or "development" in banner_lower:
                misconfigs.append({
                    "port": port,
                    "type": "development_server",
                    "description": "Development server detected in production",
                    "severity": "medium"
                })
        
        return misconfigs
    
    def _check_weak_authentication(self, target: str, banners: Dict[int, str]) -> List[Dict[str, Any]]:
        """Check for weak authentication mechanisms.
        
        Args:
            target: Target IP/hostname
            banners: Port to banner mapping
            
        Returns:
            List of weak authentication issues
        """
        weak_auth = []
        
        # This is a placeholder for authentication testing
        # In a real implementation, you would test common credentials
        for port, banner in banners.items():
            banner_lower = banner.lower()
            
            # Check for services commonly misconfigured with weak auth
            if "telnet" in banner_lower and port == 23:
                weak_auth.append({
                    "port": port,
                    "type": "telnet_exposed",
                    "description": "Telnet service exposed (often uses weak passwords)",
                    "severity": "high"
                })
            
            if "ftp" in banner_lower and port == 21:
                weak_auth.append({
                    "port": port,
                    "type": "ftp_exposed", 
                    "description": "FTP service exposed (check for anonymous access)",
                    "severity": "medium"
                })
        
        return weak_auth
    
    def _check_docker_exposure(self, target: str, banners: Dict[int, str]) -> Optional[Dict[str, Any]]:
        """Check for Docker API exposure.
        
        Args:
            target: Target IP/hostname
            banners: Port to banner mapping
            
        Returns:
            Docker exposure information or None
        """
        if 2375 in banners:
            # Docker API detected
            return {
                "exposed": True,
                "port": 2375,
                "type": "unencrypted",
                "description": "Docker API exposed without TLS encryption",
                "severity": "critical"
            }
        
        if 2376 in banners:
            # Docker API with TLS detected
            return {
                "exposed": True,
                "port": 2376,
                "type": "encrypted",
                "description": "Docker API exposed with TLS (check certificate validation)",
                "severity": "medium"
            }
        
        return None

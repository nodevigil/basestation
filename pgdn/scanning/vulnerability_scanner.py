"""
Vulnerability scanner that checks for known vulnerabilities using CVE database.
"""

from typing import Dict, Any, List, Optional
from pgdn.scanning.base_scanner import BaseScanner
from pgdn.utils.cve_updater import search_cves_for_banner


class VulnerabilityScanner(BaseScanner):
    """Vulnerability scanner that checks for known vulnerabilities."""
    
    @property
    def scanner_type(self) -> str:
        return "vulnerability"
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        super().__init__(config)
        self.max_cves_per_banner = self.config.get('max_cves_per_banner', 5)
        self.enable_database_lookup = self.config.get('enable_database_lookup', True)
    
    def scan(self, target: str, banners: Optional[Dict[int, str]] = None, **kwargs) -> Dict[str, Any]:
        """Perform vulnerability scan using banners.
        
        Args:
            target: Target IP/hostname
            banners: Dictionary of port->banner mappings
            **kwargs: Additional scan parameters
            
        Returns:
            Vulnerability scan results
        """
        if not banners:
            return {
                "target": target,
                "vulnerabilities": {},
                "scanner_type": self.scanner_type,
                "error": "No banners provided for vulnerability scanning"
            }
        
        vulnerabilities = {}
        
        for port, banner in banners.items():
            if banner:
                vulns = self._match_vulnerabilities(banner)
                if vulns:
                    vulnerabilities[port] = vulns
        
        return {
            "target": target,
            "vulnerabilities": vulnerabilities,
            "scanner_type": self.scanner_type
        }
    
    def _match_vulnerabilities(self, banner: str) -> Optional[List[Dict[str, Any]]]:
        """Match banner against known vulnerabilities.
        
        Args:
            banner: Service banner string
            
        Returns:
            List of matching CVE dictionaries or None
        """
        if not banner:
            return None
        
        if not self.enable_database_lookup:
            return None
            
        try:
            database_cves = search_cves_for_banner(banner)
            if database_cves:
                # Return top matches limited by configuration
                return database_cves[:self.max_cves_per_banner]
        except Exception as e:
            self.logger.warning(f"CVE database lookup failed for banner '{banner}': {e}")
        
        return None

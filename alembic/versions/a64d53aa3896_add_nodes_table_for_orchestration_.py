"""Add nodes table for orchestration workflow

Revision ID: a64d53aa3896
Revises: e9f923004c65
Create Date: 2025-06-24 11:51:30.057065

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a64d53aa3896'
down_revision: Union[str, Sequence[str], None] = 'e9f923004c65'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema - disabled due to auto-generated table drops."""
    # This migration was auto-generated and is trying to drop existing tables
    # We'll skip this and use the manual nodes table migration instead
    pass


def downgrade() -> None:
    """Downgrade schema - disabled."""
    pass
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('validator_scans', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_validator_scans_organization_id'), 'validator_scans', ['organization_id'], unique=False)
    op.add_column('validator_scan_reports', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_validator_scan_reports_organization_id'), 'validator_scan_reports', ['organization_id'], unique=False)
    op.add_column('validator_addresses', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_validator_addresses_organization_id'), 'validator_addresses', ['organization_id'], unique=False)
    op.add_column('signature_match_results', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_signature_match_results_organization_id'), 'signature_match_results', ['organization_id'], unique=False)
    op.add_column('scan_sessions', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_scan_sessions_organization_id'), 'scan_sessions', ['organization_id'], unique=False)
    op.add_column('protocol_probe_results', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_protocol_probe_results_organization_id'), 'protocol_probe_results', ['organization_id'], unique=False)
    op.add_column('network_scan_data', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_network_scan_data_organization_id'), 'network_scan_data', ['organization_id'], unique=False)
    op.add_column('host_discoveries', sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_host_discoveries_organization_id'), 'host_discoveries', ['organization_id'], unique=False)
    op.create_table('ledger_connection_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('agent_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('rpc_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('network_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('connection_successful', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('contract_loaded', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_authorized_publisher', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('account_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('account_balance_wei', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('account_balance_eth', sa.NUMERIC(precision=20, scale=10), autoincrement=False, nullable=True),
    sa.Column('contract_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contract_paused', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('total_summaries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('publish_cooldown', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reputation_threshold', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_hosts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('connection_duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ledger_connection_logs_pkey')),
    sa.UniqueConstraint('uuid', name=op.f('ledger_connection_logs_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ledger_connection_logs_timestamp'), 'ledger_connection_logs', ['timestamp'], unique=False)
    op.create_index(op.f('idx_ledger_connection_logs_success'), 'ledger_connection_logs', ['connection_successful'], unique=False)
    op.create_index(op.f('idx_ledger_connection_logs_organization_id'), 'ledger_connection_logs', ['organization_id'], unique=False)
    op.create_table('organizations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('organizations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='fk_organizations_created_by'),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    sa.UniqueConstraint('slug', name='organizations_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name='organizations_uuid_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_organizations_slug'), 'organizations', ['slug'], unique=False)
    op.create_index(op.f('idx_organizations_name'), 'organizations', ['name'], unique=False)
    op.create_index(op.f('idx_organizations_created_at'), 'organizations', ['created_at'], unique=False)
    op.create_index(op.f('idx_organizations_active'), 'organizations', ['is_active'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('email_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name='users_uuid_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_superuser'), 'users', ['is_superuser'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('idx_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('idx_users_active'), 'users', ['is_active'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_system_role', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('name', name='roles_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_roles_system'), 'roles', ['is_system_role'], unique=False)
    op.create_index(op.f('idx_roles_name'), 'roles', ['name'], unique=False)
    op.create_table('ledger_batches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('batch_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('batch_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('successful_publishes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_publishes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('blockchain_network', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('publisher_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('transaction_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=True),
    sa.Column('block_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('blockchain_batch_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gas_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gas_price_gwei', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('confirmed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('processing_duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confirmation_duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('ledger_batches_pkey')),
    sa.UniqueConstraint('uuid', name=op.f('ledger_batches_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ledger_batches_timestamp'), 'ledger_batches', ['batch_timestamp'], unique=False)
    op.create_index(op.f('idx_ledger_batches_success'), 'ledger_batches', ['success'], unique=False)
    op.create_table('user_organizations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('invited_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invited_by'], ['users.id'], name=op.f('user_organizations_invited_by_fkey')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('user_organizations_organization_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('user_organizations_role_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_organizations_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_organizations_pkey')),
    sa.UniqueConstraint('user_id', 'organization_id', name=op.f('uk_user_organization'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_organizations_user'), 'user_organizations', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_organizations_role'), 'user_organizations', ['role_id'], unique=False)
    op.create_index(op.f('idx_user_organizations_org'), 'user_organizations', ['organization_id'], unique=False)
    op.create_index(op.f('idx_user_organizations_active'), 'user_organizations', ['is_active'], unique=False)
    op.create_table('ledger_publish_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('scan_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('attempt_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('publishing_agent', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('agent_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('blockchain_network', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('rpc_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('publisher_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_batch', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=True),
    sa.Column('block_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gas_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gas_price_gwei', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('transaction_confirmed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('confirmation_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('host_uid', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('scan_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('summary_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=True),
    sa.Column('trust_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('report_pointer', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('processing_duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confirmation_duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scan_id'], ['validator_scans.id'], name=op.f('ledger_publish_logs_scan_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ledger_publish_logs_pkey')),
    sa.UniqueConstraint('uuid', name=op.f('ledger_publish_logs_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ledger_publish_logs_tx_hash'), 'ledger_publish_logs', ['transaction_hash'], unique=False)
    op.create_index(op.f('idx_ledger_publish_logs_timestamp'), 'ledger_publish_logs', ['attempt_timestamp'], unique=False)
    op.create_index(op.f('idx_ledger_publish_logs_success'), 'ledger_publish_logs', ['success'], unique=False)
    op.create_index(op.f('idx_ledger_publish_logs_scan_id'), 'ledger_publish_logs', ['scan_id'], unique=False)
    op.create_index(op.f('idx_ledger_publish_logs_organization_id'), 'ledger_publish_logs', ['organization_id'], unique=False)
    # ### end Alembic commands ###

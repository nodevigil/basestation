"""add_discovery_tables

Revision ID: bce123290ff7
Revises: ab90d92ecd48
Create Date: 2025-06-20 11:56:27.853479

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bce123290ff7'
down_revision: Union[str, Sequence[str], None] = 'ab90d92ecd48'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('protocol_signatures')
    op.drop_table('cve_records')
    op.drop_table('cve_update_logs')
    op.drop_table('protocols')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('protocols',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('protocols_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('ports', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('endpoints', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('banners', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('rpc_methods', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('metrics_keywords', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('http_paths', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('identification_hints', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='protocols_pkey'),
    sa.UniqueConstraint('name', name='protocols_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name='protocols_uuid_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('cve_update_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('total_cves_processed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('new_cves_added', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('updated_cves', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('processing_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('cve_update_logs_pkey')),
    sa.UniqueConstraint('uuid', name=op.f('cve_update_logs_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('cve_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('cve_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('published_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('cvss_score', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('cvss_vector', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('affected_products', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('raw_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('cve_records_pkey')),
    sa.UniqueConstraint('cve_id', name=op.f('cve_records_cve_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name=op.f('cve_records_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('protocol_signatures',
    sa.Column('protocol_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('port_signature', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('banner_signature', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('endpoint_signature', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('keyword_signature', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('uniqueness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('signature_version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['protocol_id'], ['protocols.id'], name=op.f('protocol_signatures_protocol_id_fkey')),
    sa.PrimaryKeyConstraint('protocol_id', name=op.f('protocol_signatures_pkey'))
    )
    # ### end Alembic commands ###
